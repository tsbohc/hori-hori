#!/bin/sh
# shellcheck shell=dash

# [[ $string == <glob> ]] in posix:
# https://stackoverflow.com/a/30387785

# instead of cat $file, do something like this?
# read -d $'\x04' name < "$file" 

# TODO change extract and replace to sed/awk, benchmark

replace() { # $2 with $3 in string $1
  echo "${1%%"$2"*}${3}${1#*"$2"}"
}

extract() { # shortest substring from string $1 between $2 and $3
  local s=${1%%"$3"*} ; echo "${s##*"$2"}"
}

import() {
  local varset=$1 prefix=$2 # TODO check if this actually works as expected in dash
  [ "$varset" = "config" ] || prefix=${prefix}_$1
  while read -r line ; do
    if [ "${line#"import "}" != "$line" ]; then
      import "${line#"import "}" "$prefix"
    elif [ "${line#[[:alnum:]]*"="}" != "$line" ]; then # nb: only alnum in assignments
      eval "_${prefix}_${line}"
    fi
  # TODO change to $REPO/hori/* ... instead of pwd
  done < "$varset"
}

template() { # render a string with current context
  local input expr old_expr key val; input=$1
  while [ "${input#*"{% "[!" "]*" %}"*}" != "$input" ] ; do
    expr="$(extract "$input" "{% " " %}")"
    old_expr=$expr
      while [ "${expr#*"{"[!\{\}]*"}"*}" != "$expr" ]; do
        key="$(extract "$expr" "{" "}")"
        val="$(eval "echo \$__$key")"
        [ -z "$val" ] && { echo "missing key: '$key', aborting" ; exit 1 ; }
        expr="$(replace "$expr" "{$key}" "$val")"
      done
    input="$(replace "$input" "{% $old_expr %}" "$expr")"
  done
  echo "$input"
}

s="aorst {% {{colo}_color0} %} aiorst {% {{colo}_color15} %}"

import config
template "$s"





#compare() {
#  [ "${1#$2}" != "$1" ]
#}

